package javaThread;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.TilePane;
import javafx.stage.Stage;

class UserPanel extends FlowPane{
	private TextField nameField = new TextField();
	private ProgressBar progressBar = new ProgressBar(0.0);		// progress bar(0은 아예없는거 1은 꽉찬거)
	private ProgressIndicator progressIndicator = new ProgressIndicator(0.0);
	
	// default 생성자
	public UserPanel() {
	}
	
	public UserPanel(String name) {
		this.setPrefSize(700, 50);
		nameField.setText(name);			// 들어오는 이름작성
		
		// 각각의 크기 정해주기
		nameField.setPrefSize(100, 50);
		progressBar.setPrefSize(500, 50);
		progressIndicator.setPrefSize(50, 50);
		
		// 판떼기에 올려주기
		getChildren().add(nameField);			
		getChildren().add(progressBar);
		getChildren().add(progressIndicator);
	}
	
	public TextField getNameField() {
		return nameField;
	}
	public void setNameField(TextField nameField) {
		this.nameField = nameField;
	}
	public ProgressBar getProgressBar() {
		return progressBar;
	}
	public void setProgressBar(ProgressBar progressBar) {
		this.progressBar = progressBar;
	}
	public ProgressIndicator getProgressIndicator() {
		return progressIndicator;
	}
	public void setProgressIndicator(ProgressIndicator progressIndicator) {
		this.progressIndicator = progressIndicator;
	}
}

class ProgressRunnable implements Runnable{
	private String name;
	private ProgressBar progressBar;
	private ProgressIndicator ProgressIndicator;
	private TextArea textarea;
	
	public ProgressRunnable() {
		super();
	}

	public ProgressRunnable(String name, ProgressBar progressBar,
			javafx.scene.control.ProgressIndicator progressIndicator, TextArea textarea) {
		super();
		this.name = name;
		this.progressBar = progressBar;
		ProgressIndicator = progressIndicator;
		this.textarea = textarea;
	}

	@Override
	public void run() {
		// Thread가 동작해서 progressBar를 제어하면 될 것 같아요
		Random random =new Random();
		double k = 0;
		while(progressBar.getProgress() < 1.0) {
			try {
				Thread.sleep(1000);		// 1초동안 현재 Thread를 sleep
				k += (random.nextDouble() * 0.5);
				final double tt = k;
				// k값이 지속적으로 증가.
				Platform.runLater(()->{
					progressBar.setProgress(tt);
					ProgressIndicator.setProgress(tt);
				});
				if( k > 1.0) break;
			} catch(Exception e) {
				System.out.println(e);
			}
		}
	}
}

public class Exam02_ThreadRace extends Application{
	
	private List<String> names = Arrays.asList("홍길동","이순신","강감찬");
	
	// progressBar를 제어할 Thread가 FlowPane 1개당 1개씩 존재해야 해요
	private List<ProgressRunnable> uRunnable = new ArrayList<ProgressRunnable>();
	
	TextArea textarea;
	Button btn;

	@Override
	public void start(Stage primaryStage) throws Exception {	// primaryStage 요게 실제 윈도우를 지칭하는 reference
		// 화면 구성해서 window 띄우는 코드
		// 화면 기본 layout을 설정 => 화면을 동서남북 중앙(5개의 영역)으로 분리
		BorderPane root = new BorderPane();
		// Borderpane의 크기를 설정 => 화면에 띄우는 window의 크기 설정
		root.setPrefSize(700,500);		
		
		// center부분을 차지할 TilePane을 생성해야 해요!
		TilePane center = new TilePane();
		center.setPrefColumns(1);	// 1열만 존재하는 TilePane
		center.setPrefRows(4);		// 4행이 존재하는 TitlPane
		
		// 메시지가 출력될 TextArea 생성 및 크기 결정
		textarea = new TextArea();
		textarea.setPrefSize(600, 100);
		
		// 이제 만들어진 TilePane에 3개의 FlowPane과 TextArea를 부착
		for(String name : names) {
			UserPanel panel = new UserPanel(name);
			center.getChildren().add(panel);
			uRunnable.add(
					new ProgressRunnable(panel.getNameField().getText(),
							panel.getProgressBar(),
							panel.getProgressIndicator(),
							textarea));
		}
		center.getChildren().add(textarea);
		root.setCenter(center);

		btn = new Button("버튼 클릭!!");	// 버튼클릭!! 이들어가있는 버튼이 생성됨
		btn.setPrefSize(250, 50);
		btn.setOnAction(t -> {
			// 버튼에서 Action이 발생(클릭)했을 떄 호출!	// setOnAction(여기엔 객체가 들어가야되요!?)
			// uRunnable(ArrayList)를 돌면서 Thread를 생성하고
			// start() 호출
			for(ProgressRunnable runnable : uRunnable) {
				new Thread(runnable).start();
			}
			
			// Textarea에 글자를 넣어요!!
			textarea.appendText("북한감자 서혁진\n");
		});
		FlowPane flowpane = new FlowPane();		// 긴 판자 하나 만든다고 생각하시면 됩니다
		flowpane.setPrefSize(700, 50);
		// flowpane에 버튼을 올려요!
		flowpane.getChildren().add(btn);
		root.setBottom(flowpane);				// 바탐쪽에 flowpane 붙이는 작업
		
		// Scene객체가 필요해요.
		Scene scene = new Scene(root);
		primaryStage.setScene(scene);			// 윈도우(primaryStage)에 화면을 설정해 주는 코드
		primaryStage.setTitle("Thread 예제입니다.!!");
		primaryStage.show();
		
	}

	public static void main(String[] args) {
		launch();		// 내부적으로 바로위에 start method가 실행됩니다.
	}
}
